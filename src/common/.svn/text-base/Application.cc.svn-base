// $Id$

/*************************************************************************
 * XDAQ Application Template                                             *
 * Copyright (C) 2000-2009, CERN.                                        *
 * All rights reserved.                                                  *
 * Authors: L. Orsini, A. Forrest, A. Petrucci                           *
 *                                                                       *
 * For the licensing terms see LICENSE.                                  *
 * For the list of contributors see CREDITS.                             *
 *************************************************************************/

// This version is the first update of pltslinkprocessor to work with the
// new 2017 dataflow. This skips the pltslinksource entirely and just sets
// up a zmq listener to listen to the data coming directly from FEDStreamReader.
// A zmq poll is used to listen to both the workloop zmq publisher (to get the
// TCDS data) and the slink zmq publisher.
//
// At the moment the only thing done with the data is the filling of the
// occupancy plots, but with this framework in place it should be easily
// extensible to making other plots and publishing more information to BRILDAQ.
//
//  -- Paul Lujan, 24 April 2017

#include <iostream>
#include <string>
#include "cgicc/CgiDefs.h"
#include "cgicc/Cgicc.h"
#include "cgicc/HTTPHTMLHeader.h"
#include "cgicc/HTMLClasses.h"
#include "xgi/framework/Method.h"

#include "bril/pltslinkprocessor/Application.h"
#include "bril/pltslinkprocessor/exception/Exception.h"
#include "interface/bril/PLTSlinkTopics.hh"

#include "eventing/api/exception/Exception.h"

#include "xdata/Properties.h"

#include "toolbox/mem/HeapAllocator.h"
#include "toolbox/mem/MemoryPoolFactory.h"
#include "xcept/tools.h"
#include "xdata/InfoSpaceFactory.h"
#include "toolbox/TimeVal.h"
#include "toolbox/task/TimerFactory.h"

#include "root/TCanvas.h"
#include "root/TStyle.h"
#include "root/TLine.h"
#include "root/TROOT.h"

#include "b2in/nub/Method.h"
//#include "toolbox/regex.h"
#include "toolbox/task/WorkLoop.h"
#include "toolbox/task/WorkLoopFactory.h"
#include "bril/pltslinkprocessor/zmq.hpp"

#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

#include <sys/stat.h>
#include <sys/types.h>

#include "bril/pltslinkprocessor/PLTEvent.h"

using boost::property_tree::ptree;
using boost::property_tree::write_json;

XDAQ_INSTANTIATOR_IMPL (bril::pltslinkprocessor::Application)

using namespace interface::bril;

bril::pltslinkprocessor::Application::Application (xdaq::ApplicationStub* s) throw (xdaq::exception::Exception)
  : xdaq::Application(s),xgi::framework::UIManager(this),eventing::api::Member(this){
  xgi::framework::deferredbind(this,this,&bril::pltslinkprocessor::Application::Default, "Default");
  m_poolFactory = toolbox::mem::getMemoryPoolFactory();
  m_appDescriptor = getApplicationDescriptor();
  m_classname = m_appDescriptor->getClassName();
  m_instanceid = m_appDescriptor->getInstance();
	
  std::string memPoolName = m_classname + m_instanceid.toString() + std::string("_memPool");
  toolbox::mem::HeapAllocator* allocator = new toolbox::mem::HeapAllocator();
  toolbox::net::URN urn("toolbox-mem-pool",memPoolName);
  m_memPool = m_poolFactory->createPool(urn, allocator);
  m_timername="lumiPLT_SlinkprocessorTimer";
  //	do_starttimer();
  for(int ihist = 0; ihist<16; ihist++){
    for(int iroc = 0; iroc<3; iroc++){
      char histname[80];
      sprintf(histname, "ChannelOccupancy_CHA%02d_ROC%02d", ihist, iroc);
      m_OccupancyPlots[((ihist*3)+iroc)] = new TH2F(histname, histname, 100, 0, 100, 100, 0, 100);
    }
  }

  try{
    getApplicationInfoSpace()->fireItemAvailable("bus",&m_bus);
    getApplicationInfoSpace()->fireItemAvailable("workloopHost",&m_workloopHost);
    getApplicationInfoSpace()->fireItemAvailable("slinkHost",&m_slinkHost);
    getApplicationInfoSpace()->addListener(this, "urn:xdaq-event:setDefaultValues");
    m_publishing = toolbox::task::getWorkLoopFactory()->getWorkLoop(m_appDescriptor->getURN()+"_publishing","waiting");
  }
  catch(xcept::Exception & e){
    XCEPT_RETHROW(xdaq::exception::Exception, "Failed to add Listener", e);
  }

}

bril::pltslinkprocessor::Application::~Application (){
}

void bril::pltslinkprocessor::Application::actionPerformed(xdata::Event& e){
	
  std::stringstream msg;
  if(e.type() == "urn:xdaq-event:setDefaultValues"){

    std::string timername("zmqstarter");
    try{
      toolbox::TimeVal zmqStart(2,0);
      toolbox::task::Timer * timer = toolbox::task::getTimerFactory()->createTimer(timername);
      timer->schedule(this, zmqStart, 0, timername);
    }catch(xdata::exception::Exception& e){
      std::stringstream msg;
      msg << "failed to start timer" << timername;
      LOG4CPLUS_ERROR(getApplicationLogger(),msg.str()+stdformat_exception_history(e));
      XCEPT_RETHROW(bril::pltslinkprocessor::exception::Exception,msg.str(),e);
    }
  }
}

void bril::pltslinkprocessor::Application::actionPerformed(toolbox::Event& e){
  if(e.type() == "eventing::api::BusReadyToPublish" ){
    std::string busname = (static_cast<eventing::api::Bus*>(e.originator()))->getBusName();
    std::stringstream msg;
    msg<< "event Bus '" << busname << "' is ready to publish";
    m_unreadybuses.erase(busname);
    if(m_unreadybuses.size()!=0) return; //wait until all buses are ready
    try{    
      toolbox::task::ActionSignature* as_publishing = toolbox::task::bind(this,&bril::pltslinkprocessor::Application::publishing,"publishing");
      m_publishing->activate();
      m_publishing->submit(as_publishing);
    }catch(toolbox::task::exception::Exception& e){
      msg<<"Failed to start publishing workloop "<<stdformat_exception_history(e);
      LOG4CPLUS_ERROR(getApplicationLogger(),msg.str());
      XCEPT_RETHROW(bril::pltslinkprocessor::exception::Exception,msg.str(),e);	
    }    
  }
}

/*
 * This is the default web page for this XDAQ application.
 */
void bril::pltslinkprocessor::Application::Default (xgi::Input * in, xgi::Output * out) throw (xgi::exception::Exception) {
  
  *out << busesToHTML();
  std::string appurl = getApplicationContext()->getContextDescriptor()->getURL()+"/"+m_appDescriptor->getURN();
  *out << appurl;
  *out << "We are publishing simulated data on frequency : "<< m_signalTopic.toString();   
  *out << cgicc::br();

  *out << cgicc::table().set("class","xdaq-table-vertical");
  *out << cgicc::caption("input/output");
  *out << cgicc::tbody();

  *out << cgicc::tr();
  *out << cgicc::th("in_topics");
  *out << cgicc::td(pltslinkhistT::topicname());
  *out << cgicc::tr();

  *out << cgicc::tr();
  *out << cgicc::th("out_topics");
  *out << cgicc::td( pltslinkhistT::topicname());
  *out << cgicc::tr();

  *out << cgicc::tr();
  *out << cgicc::th("signalTopic");
  *out << cgicc::td( m_signalTopic.toString());
  *out << cgicc::tr();

  *out << cgicc::tbody(); 
  *out << cgicc::table();
  *out << cgicc::br() << std::endl;

  *out << cgicc::img().set("src","/OccupancyPlot_CHA15_ROC2.pdf").set("alt", "Channel 15 ROC 2").set("height", "100").set("width","100") << std::endl;

}

// onMessage has been removed, since this version of the processor doesn't need to listen
// to messages from the BRILDAQ bus any more, only the zmq receivers

void bril::pltslinkprocessor::Application::do_publish(const std::string& busname,const std::string& topicname,toolbox::mem::Reference* bufRef){
  std::stringstream msg;
  try{
    xdata::Properties plist;
    plist.setProperty("DATA_VERSION",DATA_VERSION);
    std::map<std::string,std::string>::iterator it=m_outtopicdicts.find(topicname);
    if( it!=m_outtopicdicts.end() ){
      plist.setProperty("PAYLOAD_DICT",it->second);
    }
    msg << "publish to "<<busname<<" , "<<topicname; 
    this->getEventingBus(busname).publish(topicname,bufRef,plist);
  }catch(xcept::Exception& e){
    msg<<"Failed to publish "<<topicname<<" to "<<busname;    
    LOG4CPLUS_ERROR(getApplicationLogger(),stdformat_exception_history(e));
    if(bufRef){
      bufRef->release();
      bufRef = 0;
    }
    XCEPT_DECLARE_NESTED(bril::pltslinkprocessor::exception::Exception,myerrorobj,msg.str(),e);
    this->notifyQualified("fatal",myerrorobj);
  }  
}
 

bool bril::pltslinkprocessor::Application::publishing(toolbox::task::WorkLoop* wl){
  QueueStoreIt it;
  for(it=m_topicoutqueues.begin();it!=m_topicoutqueues.end();++it){
    if(it->second->empty()) continue;
    std::string topicname = it->first;
    LOG4CPLUS_INFO(getApplicationLogger(),"Publishing "+topicname);
    toolbox::mem::Reference* data = it->second->pop();
    std::pair<TopicStoreIt,TopicStoreIt > ret = m_out_topicTobuses.equal_range(topicname);
    for(TopicStoreIt topicit = ret.first; topicit!=ret.second;++topicit){
      if(data) do_publish(topicit->second,topicname,data->duplicate());    
    }
    if(data) data->release();
  }
  return true;
}


void bril::pltslinkprocessor::Application::do_stoptimer(){
  toolbox::task::Timer* timer = toolbox::task::TimerFactory::getInstance()->getTimer(m_timername);
  if( timer->isActive() ){
    timer->stop();
  }
}

void bril::pltslinkprocessor::Application::do_starttimer(){
  if(!toolbox::task::TimerFactory::getInstance()->hasTimer(m_timername)){
    (void) toolbox::task::TimerFactory::getInstance()->createTimer(m_timername);
  }
  toolbox::task::Timer* timer = toolbox::task::TimerFactory::getInstance()->getTimer(m_timername);
  toolbox::TimeInterval interval(20,0);
  try{
    do_stoptimer();
    toolbox::TimeVal start = toolbox::TimeVal::gettimeofday();
    timer->start();
    timer->scheduleAtFixedRate( start, this, interval, 0, m_timername);
  }catch (toolbox::task::exception::InvalidListener& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }catch (toolbox::task::exception::InvalidSubmission& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }catch (toolbox::task::exception::NotActive& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }catch (toolbox::exception::Exception& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }
}


void bril::pltslinkprocessor::Application::timeExpired(toolbox::task::TimerEvent& e){
  LOG4CPLUS_INFO(getApplicationLogger(), "Beginning zmq listener");
  do_zmqclient();
}

void bril::pltslinkprocessor::Application::do_zmqclient(){
  // Use zmq_poll to get zmq messages from the multiple sources.
  zmq::context_t zmq_context(1);

  // Workloop zmq listener: used for getting TCDS info from workloop
  zmq::socket_t workloop_socket(zmq_context, ZMQ_SUB);
  workloop_socket.connect(m_workloopHost.c_str());
  workloop_socket.setsockopt(ZMQ_SUBSCRIBE, 0, 0);
  
  uint32_t EventHisto[3573];
  uint32_t tcds_info[4];
  uint32_t channel;
  int old_run = 9999999; // Set these high so we don't immediately publish
  int old_ls = 999999;   // the first LS

  // Slink zmq listener: used for getting actual data from slink
  zmq::socket_t slink_socket(zmq_context, ZMQ_SUB);
  slink_socket.connect(m_slinkHost.c_str());
  slink_socket.setsockopt(ZMQ_SUBSCRIBE, 0, 0);

  uint32_t slinkBuffer[1024];
  // Translation of pixel FED channel number to readout channel number.
  const int channelNumber[37] = {-1, 0, 1, -1, 2, 3, -1, 4, 5, -1, 6, 7,  // 0-11
				 -1, 8, 9, -1, 10, 11, -1, 12, 13, -1, 14, 15, // 12-23
				 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  int nevents = 0; // counter of slink items received

  // Set up poll object
  zmq::pollitem_t pollItems[2] = {
    { workloop_socket, 0, ZMQ_POLLIN, 0 },
    { slink_socket, 0, ZMQ_POLLIN, 0 }
  };

  // Set up the PLTEvent object to do the event decoding. Note: for testing purposes we don't
  // have a gaincal, alignment, or tracking, but we will want to implement these in order to
  // do more interesting things.
  PLTEvent Event("", kBuffer);
  Event.SetPlaneClustering(PLTPlane::kClustering_NoClustering, PLTPlane::kFiducialRegion_All);
  Event.SetPlaneFiducialRegion(PLTPlane::kFiducialRegion_All);
  Event.SetTrackingAlgorithm(PLTTracking::kTrackingAlgorithm_NoTracking);

  // Loop and receive messages
  while (1) {
    zmq_poll(&pollItems[0],  2,  -1);
    
    // Check for workloop message
    if (pollItems[0].revents & ZMQ_POLLIN) {
      zmq::message_t zmq_EventHisto(3573*sizeof(uint32_t));
      workloop_socket.recv(&zmq_EventHisto);
      
      memcpy(EventHisto, zmq_EventHisto.data(), 3573*sizeof(uint32_t));
      memcpy(&channel, (uint32_t*)EventHisto+2, sizeof(uint32_t));
      memcpy(&tcds_info, (uint32_t*)EventHisto+3, 4*sizeof(uint32_t));
      m_nibble = tcds_info[0];
      m_ls = tcds_info[1];
      m_run = tcds_info[2];
      m_fill = tcds_info[3];

      // std::cout << "Received tcds message ch " << channel << " fill " << m_fill << " run " << m_run << " LS " << m_ls << " nibble " << m_nibble << std::endl;

      // If we've started a new run or a new lumisection, then go ahead and publish what we have.
      if (m_ls > old_ls or m_run > old_run) {
	std::cout << "Publishing plots with fill " << m_fill << " run " << m_run << " LS " << m_ls << " after " << nevents << " events " << std::endl;
	make_plots();
      }
      old_ls = m_ls;
      old_run = m_run;
    }

    // Check for slink message
    if (pollItems[1].revents & ZMQ_POLLIN) {
      int eventSize = slink_socket.recv((void*)slinkBuffer, sizeof(slinkBuffer)*sizeof(uint32_t), 0);
      
      // feed it to Event.GetNextEvent()
      Event.GetNextEvent(slinkBuffer, eventSize/sizeof(uint32_t));
      
      // Now the event is fully processed and we can do things with the processed information.
      // For now all we do is put the hits in the occupancy plots, but we can do all sorts of other
      // things (work with tracks, pulse heights, etc.)
      // std::cout << "Event " << Event.EventNumber() << " BX " << Event.BX() << " Time " << Event.Time() << " has " << Event.NHits() << " hits and " << Event.GetErrors().size() << " errors" << std::endl;
      int nhits = 0;
      for (size_t ip = 0; ip != Event.NPlanes(); ++ip) {
	PLTPlane* Plane = Event.Plane(ip);
	for (size_t ih = 0; ih != Plane->NHits(); ++ih) {
	  PLTHit* Hit = Plane->Hit(ih);
	  // Convert pixel FED channel number to readout channel number
	  if (Hit->Channel() < 0 || Hit->Channel() > 36 || channelNumber[Hit->Channel()] < 0) {
	    // std::cout << "Found hit with invalid channel number: " << Hit->Channel();
	  } else {
	    int readoutChan = channelNumber[Hit->Channel()];
	    // std::cout << "Hit  " << nhits << " FED chan " << Hit->Channel() << " readout chan " << readoutChan << " ROC " << Hit->ROC() << " col " << Hit->Column() << " row " << Hit->Row() << std::endl;
	    nhits++;
	    m_OccupancyPlots[(readoutChan*3) + Hit->ROC()]->Fill(Hit->Column(), Hit->Row());
	  }
	}
      }
      
      // const std::vector<PLTError>& errors = Event.GetErrors();
      // if (errors.size() > 0) {
      // 	for (std::vector<PLTError>::const_iterator it = errors.begin(); it != errors.end(); ++it) {
      //  	  it->Print();
      //  	}
      // }

      nevents++;
    } // slink message

  } // message loop  

}


void bril::pltslinkprocessor::Application::make_plots(){
  char folderName[160];
  sprintf(folderName, "/cmsnfsscratch/globalscratch/cmsbril/PLT/DQM/run%06d", m_run );
  char cmd[200];
  sprintf(cmd, "mkdir -p -m 777 %s", folderName);
  system(cmd);

  char outFolderROOT[160] = "/cmsnfsscratch/globalscratch/cmsbril/PLT/DQM/";
  char filenameROOT[160];
  sprintf(filenameROOT, "run%06d/run%06d_ls%04d_streamDQMPLT_eventing-bus.root", m_run, m_run, m_ls );
  TFile DQMFile(strcat(outFolderROOT,filenameROOT), "RECREATE");

  char outFolderDAT[160] = "/cmsnfsscratch/globalscratch/cmsbril/PLT/DQM/";
  char filenameDAT[160];
  sprintf(filenameDAT, "run%06d/run%06d_ls%04d_streamDQMPLT_eventing-bus.dat", m_run, m_run, m_ls );
  int dumCounter = 0;


  ptree dataJsonPtree;
  ptree plots;
  for(int ihist = 0; ihist < 16; ihist++){
    for(int iroc = 0; iroc < 3; iroc++){
      m_OccupancyPlots[((ihist*3)+iroc)]->Draw("colz");
      m_OccupancyPlots[((ihist*3)+iroc)]->Write();

      ptree eachPlot;

      eachPlot.put( "type", "2D" );
      char titles[80];
      sprintf( titles, "OccupancyPlot_CHA%02d_ROC%02d, Row (ROC %02d), Column (ROC %02d)", ihist, iroc, iroc, iroc );
      eachPlot.put( "titles", titles );
      char names[80];
      sprintf( names, m_OccupancyPlots[((ihist*3)+iroc)]->GetName());
      eachPlot.put( "names", names );
      ptree nbinsX, nbinsY;
      ptree plotNbins;
      nbinsX.put("", 100);
      nbinsY.put("", 100);
      plotNbins.push_back(std::make_pair("", nbinsX));
      plotNbins.push_back(std::make_pair("", nbinsY));
      eachPlot.add_child( "nbins", plotNbins );
      ptree minX, maxX;
      ptree rangeX;
      minX.put("", 0);
      maxX.put("", 100);
      rangeX.push_back(std::make_pair("", minX));
      rangeX.push_back(std::make_pair("", maxX));
      eachPlot.add_child( "xrange", rangeX );
      ptree minY, maxY;
      ptree rangeY;
      minY.put("", 0);
      maxY.put("", 100);
      rangeY.push_back(std::make_pair("", minY));
      rangeY.push_back(std::make_pair("", maxY));
      eachPlot.add_child( "yrange", rangeY );

      double w;
      ptree plotData;
      for (int biny=0; biny<= m_OccupancyPlots[((ihist*3)+iroc)]->GetNbinsY()+1; biny++) {
	for (int binx=0; binx<= m_OccupancyPlots[((ihist*3)+iroc)]->GetNbinsX()+1; binx++) {
	  w = m_OccupancyPlots[((ihist*3)+iroc)]->GetBinContent(binx,biny);
	  if(w!=0) {
	    ptree binContent;
	    ptree X, Y, W; 
	    X.put("", binx);
	    Y.put("", biny);
	    W.put("", w);
	    binContent.push_back(std::make_pair("", X));
	    binContent.push_back(std::make_pair("", Y));
	    binContent.push_back(std::make_pair("", W));
	    plotData.push_back(std::make_pair("", binContent));

	  }
	}
      }
      eachPlot.add_child("data", plotData);
      dumCounter++;

      plots.push_back(std::make_pair("", eachPlot ));
    }
  }
  dataJsonPtree.add_child("OccupancyPlots", plots);
  write_json( strcat(outFolderDAT,filenameDAT), dataJsonPtree);


  char outFolder[160] = "/cmsnfsscratch/globalscratch/cmsbril/PLT/DQM/";
  char filenameJSN[160];
  sprintf(filenameJSN, "run%06d/run%06d_ls%04d_streamDQMPLT_eventing-bus.jsn", m_run, m_run, m_ls );
  char tmpOutFolder[160] = "/cmsnfsscratch/globalscratch/cmsbril/PLT/DQM/";
  char tmpFilenameJSN[160];
  sprintf(tmpFilenameJSN, "run%06d/run%06d_ls%04d_streamDQMPLT_eventing-bus.tmp", m_run, m_run, m_ls );
  char filenameDATv2[160];
  sprintf(filenameDATv2, "run%06d_ls%04d_streamDQMPLT_eventing-bus.dat", m_run, m_ls );
  ptree jsonPtree;
  ptree infoData, infoEntries, infoFilename, infoZeros, infoEmpty;
  infoEntries.put<int>("", 0);
  infoFilename.put("", filenameDATv2);
  infoEmpty.put("", "");
  infoZeros.put<int>("", 0);
  infoData.push_back(std::make_pair("", infoEntries));
  infoData.push_back(std::make_pair("", infoEntries));
  infoData.push_back(std::make_pair("", infoZeros));
  infoData.push_back(std::make_pair("", infoFilename));
  infoData.push_back(std::make_pair("", infoZeros));
  infoData.push_back(std::make_pair("", infoZeros));
  infoData.push_back(std::make_pair("", infoZeros));
  infoData.push_back(std::make_pair("", infoZeros));
  infoData.push_back(std::make_pair("", infoZeros));
  infoData.push_back(std::make_pair("", infoEmpty));
  jsonPtree.add_child( "data", infoData );
  write_json( strcat(tmpOutFolder,tmpFilenameJSN), jsonPtree);
  std::rename( tmpOutFolder, strcat(outFolder,filenameJSN) );


  DQMFile.Write();
  DQMFile.Close();
  std::cout << "Output complete. DQM files " << filenameJSN << ", " << filenameDAT << " and " << filenameROOT << " created." << std::endl;

}

